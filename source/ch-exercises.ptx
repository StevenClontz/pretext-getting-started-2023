<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-exercises">
  <title>Practice Exercises</title>
  <introduction>
    <p>
      Let's get our hands dirty and try writing some PreTeXt.  If you have some ideas of what you want to try, go for it.  Otherwise, try to implement as many of the following as you can.  For each <term>exploration</term> below, if you get stuck, click on the hint, and if you want to see how to implement it completely, click on the solution.
    </p>
  </introduction>
  <section>
  <title>Basic PreTeXt</title>

  <exploration>
    <title>Lists and Paragraphs</title>
    <statement>
      <p>
        Write a numbered list of your favorite three animals and an unnumbered list of your three favorite numbers (in no particular order).  Put text introducing the lists between them.
      </p>
    </statement>
    <hint>
      <p>
        You can use the <tag>ol</tag> tag for ordered lists, and <tag>ul</tag> for unordered lists.  Each item should be inside <tag>li</tag>s.  
      </p>
    </hint>
    <hint>
      <p>
        For the content around the lists, you will want them to be in <tag>p</tag> tags.  Note also that the list themselves must be nested in these paragraphs.  You can't have lists floating on their own.
      </p>
    </hint>
    <solution>
        <pre>
          <![CDATA[
<p>
  Here is my list of animals:
  <ol>
    <li>Shark</li>
    <li>Sloth</li>
    <li>Slork</li>
  </ol>
</p>
<p>
  My favorite numbers, in no particular order, happen to be:
  <ul>
    <li>1</li>
    <li>2</li>
    <li>3</li>
  </ul>
</p>
          ]]>
        </pre>
    </solution>
    

  </exploration>

  <exploration>
    <title>Static Exercises</title>
    <introduction>
      <p>
        The following examples discuss the different kinds of static exercises you can write.
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Create an exercise with multiple parts, each with a separate solution.  
        </p>
      </statement>
      <hint>
        <p>
          This requires the use of <c>task</c> environments inside an <c>exercise</c> or  <c>project-like</c> environment. 
          For the syntax to be valid, begin with an <c>introduction</c>, then use a separate <c>task</c> for each part of the question.
          Each <c>task</c> should consist of a single <c>statement</c> and <c>solution</c>. 
        </p>
      </hint>
      <solution>
        <pre>
        <![CDATA[
          <exercise>
            <introduction>
              <p>
                <em>Anything relevent to all parts of the problem goes here.</em>
              </p>
            </introduction>
            <task>
              <statement>
                <p>
                  <em>The first question</em>
                </p>
              </statement>
              <solution>
                <p>
                  <em>The first solution</em>
                </p>
              </solution>
            </task>
            <task>
              <statement>
                <p>
                  <em>The second question</em>
                </p>
              </statement>
              <solution>
                <p>
                  <em>The second solution</em>
                </p>
              </solution>
            </task>
          </exercise>
        ]]>
        </pre>
      </solution>
    </task>
 </exploration>

 <exploration>
    <title>WebWork Exercises</title>
    <introduction>
      <p>
        The exercises below illustrate the different kinds of <em>interactive</em> exercises you can write. 
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Write an interactive WebWork Exercise that generates two random numbers, and asks the user to enter the sum of those numbers.
        </p>
      </statement>
      <hint>
        <p>
          This example is taken directly from <url href="https://pretextbook.org/doc/guide/html/webwork-source.html" />.  
        </p>
        <ol>
          <li>
            <p>
              All perl and setup must happen between the <c>&lt;setup&gt;&lt;pg-setup&gt;...&lt;/pg-setup&gt;&lt;/setup&gt;</c> tags, as in any WebWork problem.
            </p>
          </li>
          <li>
            <p>
              Format statements as usual in <pretext />
            </p>
          </li>
          <li>
            <p>
              To reference the perl variable <c>$a</c> in the <c>statement</c>, type <c>&lt;var name="$a"&gt;</c>.
            </p>
          </li>
          <li>
            <p>
              To create an answer blank, where the answer is the perl variable <c>$a</c>, type <c>&lt;var name="$a" width="5" &gt;</c>.
              Here, <c>@width</c> controls the width of the answer blank.
            </p>
          </li>
        </ol>
      </hint>
      <solution>
        <pre>
        <![CDATA[
          <exercise>
            <webwork>
              <setup>
                <pg-code>
                  $a = Compute(random(1,5,1));  
                  $b = Compute(random(6,9,1));  
                  $c = Compute("$a+$b");
                </pg-code>
              </setup>
            
              <statement>
                <p>Compute <m><var name="$a"/> + <var name="$b"/></m>.</p>
                <instruction>Type your answer without using the <c>+</c> sign.</instruction>
                <p>The sum is <var name="$c" width="2"/>.</p>
              </statement>
              
              <solution>
                <p><m><var name="$a"/> + <var name="$b"/> = <var name="$c"/></m>.</p>
              </solution>
            </webwork>
          </exercise>
          ]]>
        </pre>
      </solution>
    </task>
    <task>
      <statement>
        <p>
          Write a WebWork problem with a popup list and a single select list.<fn>WebWork multiple select lists are not currently compatible with PreTeXt</fn>
        </p>
      </statement>
      <hint>
        <p>
          For the PreTeXt syntax, see <xref ref=""/> in the documentation.
        </p>
        <p>
          For the <c>setup</c> portion of the <c>webwork</c> code, follow the WebWork documentation at <url href="https://webwork.maa.org/wiki/PopUpLists" /> and <url href="https://webwork.maa.org/wiki/MultipleChoiceRadio1" />.  Note that you only need to follow the yellow (Setup) portion of the WebWork instructions.  The other sections are managed by PreTeXt. 
        </p>
      </hint>
      <solution>
        <pre>
        <![CDATA[
          <exercise>
            <webwork>
                <pg-code>
                $color_question = PopUp(
                  ["?","Red","Blue","Green"],
                  "Blue" );

                $linearfunction=RadioButtons(['\(3(x-2)+1\)','\(2x(x+1)-3\)','\(2\)'], '\(2x(x+1)-3\)');                
                </pg-code>
              <statement>
                <p>
                    Select the best color from the list 
                    <var name="$color_question" form="popup"/>
                </p>
                <p>
                  Which of the following is <em>not</em> a linear function. 
                </p>
                <p>
                  <var name="$linearfunction" width="buttons"/>
                </p>
              </statement>
            </webwork>
          </exercise>
        ]]>
        </pre>
      </solution>
    </task>
    <task>
      <statement>
        <p>
          Write a WebWork Exercise that asks for roots of quadratic functions, such that the functions generated have <em>varying numbers</em> of roots.  
        </p>
      </statement>
      <hint>
        <p>
          You can use perl control structures in the  <c>&lt;setup&gt;&lt;pg-setup&gt;...&lt;/pg-setup&gt;&lt;/setup&gt;</c> portion of the code. 
        </p>
        <p>
          If you are comparing magnitudes, you <em>must</em> replace <m>a \lt b</m> with <c>a &amp;lt; b</c> and <m>c \gt d</m> with <c>c &amp;gt; d</c>.
        </p>
      </hint>
      <solution>
        <pre>
        <![CDATA[
          <exercise>
            <webwork>
              <setup>
                <pg-code>
                  $a = random(0.1,0.5,0.01);
                  $b = random(0.5,3.5,0.25);
                  $c = random(1,9,0.2);
                  $disc = $b*$b-4*$a*$c;
                  $f = Compute("$a*x^2 + $b*x + $c");
                  if ($disc &gt;= 0)
                  {
                    $root1 = Compute(" (-$b + sqrt($b^2 - 4*$a*$c))/(2*$a)");
                    $root2 = Compute(" (-$b - sqrt($b^2 - 4*$a*$c))/(2*$a)");
                    $roots = List("$root1,$root2");
                  } else{
                    $roots = Compute("DNE");
                  }
                </pg-code>
              </setup>
              <statement>
                <p>
                  Let <m>f(x) = <var name="$a"/>x^2 + <var name="$b"/>x + <var name="$c"/></m>.  Find all <m>x</m> such that <m>f(x) = 0</m>.
                </p>
                <instruction>
                  If there is more than one answer, enter your answer as a comma separated list.  If there are no answers, enter <m>DNE</m>
                </instruction>
                <p>
                  Solutions = <var name="$roots" width="20"/>
                </p>
              </statement>
            </webwork>
          </exercise>
        ]]>
        </pre>
      </solution>
    </task>
    <task>
      <statement>
        <p>
          Write a WebWork Exercise that asks for roots of quadratic functions, such that the functions generated <em>always has real roots</em>.  
        </p>
      </statement>
      <hint>
        <p>
          There are two ways to approach this problem. 
          First, you can manually select the random seed to ensure that all quadratics have real roots. 
        </p>
        <p>
          But you can also use perl structures like <c>do-while</c> to check the discriminant of the quadratic generated, and to rerandomize the problem if no real roots exist.  
        </p>
      </hint>
      <solution>
        <pre>
        <![CDATA[
            <exercise>
              <webwork>
                <setup>
                  <pg-code>
                    do{
                      $a = random(0.1,0.5,0.01);
                      $b = random(0.5,3.5,0.25);
                      $c = random(1,9,0.2);
                      $disc = $b*$b-4*$a*$c;
                    } while ( 0 &gt; $disc ) ;
                    $f = Compute("$a*x^2 + $b*x + $c");
                    $root1 = Compute(" (-$b + sqrt($b^2 - 4*$a*$c))/(2*$a)");
                    $root2 = Compute(" (-$b - sqrt($b^2 - 4*$a*$c))/(2*$a)");
                    $roots = List($root1,$root2);
                  </pg-code>
                </setup>
              
                <statement>
                  <p>
                    Let <m>f(x) = <var name="$a"/>x^2 + <var name="$b"/>x + <var name="$c"/></m>.  Find all <m>x</m> such that <m>f(x) = 0</m>.
                  </p>
                  <instruction>
                    If there is more than one answer, enter your answer as a comma separated list.
                  </instruction>
                  <p>
                    Solutions = <var name="$roots" width="20"/>
                  </p>
                </statement>
              </webwork>
            </exercise>
        ]]>
        </pre>
      </solution>
    </task>
  </exploration>



  <exploration>
    <statement>
      <p>
        Create the folowing images using TikZ
      </p>
      <sidebyside widths="33% 33%" margins="11%" valign="middle">
        <image width="25%" xml:id="tikz_quick_eg">
          <latex-image>
            \begin{tikzpicture}
              \draw[fill=red,opacity=0.2] (0,0) circle (1.15);
              \draw[fill=blue,opacity=0.2] (1,0) circle (1.15);
              \end{tikzpicture}
          </latex-image>
        </image>

        <image width="33%" xml:id="image_tikz_eg">
          <latex-image>
            \begin{tikzpicture} 
              \\ Shade the enclosed area first
              \draw[color=white,fill=green,opacity=0.33] 
                (1,0) 
                -- (1,{cos(1 r)+2}) 
                -- plot[domain= 1:3] ({\x},{cos(\x r)+2}) 
                -- (3,{cos(3 r)+2})
                -- (3,0)
                -- (1,0);

              \\ Draw the axes
              \draw[latex-latex] (-1,0) -- (5,0);
              \draw[latex-latex] (0,-1) -- (0,4);

              \\ Plot the function
              \draw [thick,domain=-1:4.5] plot ({\x},{cos(\x r)+2});
              \node [thick,above right] at (4.5,{cos(4.5 r) + 2}){$f$};

              \\ Draw the boundaries
              \draw[red] (1,3) -- (1,-0.25) node [below] {$a$};
              \draw[red] (3,3) -- (3,-0.25) node [below] {$b$};

              \\ Label the area
              \draw[&lt;- , very thick] (2,0.5) -- (2.2,-1) node[below] {area between $f$ and $x$-axis over $[a,b]$};
            \end{tikzpicture}
          </latex-image>
        </image>
      </sidebyside>
    </statement>
    <hint>
      <p>
        Use two <c>image</c> environments, each containing a <c>latex-image</c> environment.
        To display the images side by side, use the <c>sidebyside</c> environment. 
        To get the sizes and spacing even and uniform, you will need to set <c>@widths</c> and <c>@margins</c> in the <c>sidebyside</c> environment. 
      </p>
      <p>
        Remember that the &lt; and &gt; symbols are restricted.  
        For lines, it is eaisest to use <c>latex</c> or <c>stealth</c> as your arrow style. 
        If you must use  &lt; and &gt; in your TikZ code, you must replace the symbols with <c>&amp;lt;</c> and <c>&amp;gt;</c> respectively.
      </p>
    </hint>
    <solution>
        <pre>
        <![CDATA[
          <sidebyside  widths="33% 33%" margins="11%" valign="middle">
            <image width="25%" xml:id="tikz_quick_eg">
              <latex-image>
                \begin{tikzpicture}
                  \draw[fill=red,opacity=0.2] (0,0) circle (1.15);
                  \draw[fill=blue,opacity=0.2] (1,0) circle (1.15);
                  \end{tikzpicture}
              </latex-image>
            </image>

            <image width="33%" xml:id="image_tikz_eg">
              <latex-image>
                \begin{tikzpicture} 
                  \\ Shade the enclosed area first
                  \draw[color=white,fill=green,opacity=0.33] 
                    (1,0) 
                    -- (1,{cos(1 r)+2}) 
                    -- plot[domain= 1:3] ({\x},{cos(\x r)+2}) 
                    -- (3,{cos(3 r)+2})
                    -- (3,0)
                    -- (1,0);

                  \\ Draw the axes
                  \draw[latex-latex] (-1,0) -- (5,0);
                  \draw[latex-latex] (0,-1) -- (0,4);

                  \\ Plot the function
                  \draw [thick,domain=-1:4.5] plot ({\x},{cos(\x r)+2});
                  \node [thick,above right] at (4.5,{cos(4.5 r) + 2}){$f$};

                  \\ Draw the boundaries
                  \draw[red] (1,3) -- (1,-0.25) node [below] {$a$};
                  \draw[red] (3,3) -- (3,-0.25) node [below] {$b$};

                  \\ Label the area
                  \draw[&lt;- , very thick] (2,0.5) -- (2.2,-1) node[below] {area between $f$ and $x$-axis over $[a,b]$};
                \end{tikzpicture}
              </latex-image>
            </image>
          </sidebyside>
        ]]>
        </pre>
    </solution>
  </exploration>

  <exploration>
    <statement>
      <p>
        Create the following interactive JSXGraph graphic 
      </p>
      <interactive platform="jsxgraph" width="50%">
        <slate xml:id="jsxgraph-slope-via-tangent"  surface="jessiecode" axis="true" grid="true" >
          // Set the graph window.  
          //  The order of values is [xmin, ymax, xmax, ymin]
          //  keepaspectratio=true forces the x and y scales to be equal
          $board.setBoundingBox( [ -5, 10, 7, -6 ] , keepaspectratio=false) ;

          // Create the slider 
          xslider = slider(
                // Specify slider location
                  [0.5,-3], [5.5,-3], 
                // Specify smallest/starting/largest value for slider
                  [-5,1,7])
              &lt;&lt;
                  name:"a",
                  snapWidth:0.01
              &gt;&gt;  ;      
            
            // Define a function and its tangent line at the current slider value
            // This will allow us to reference them in several places
            f1 = function(x) { 
              return 1/5*(x+3)*(x-2)*(x-5)-1;
            } ;
            tangentline = function(x) {
              x0 =  xslider.Value();
              m = (f1(x0+0.00001) - f1(x0))/0.00001;
              return m*(x-x0) + f1(x0) ; 
            } ;

            // Graph the function and its tangent line 
            f1Graph = functiongraph( f1 )  
              &lt;&lt; 
                  strokeColor:"blue"  
              &gt;&gt;;
            tangentGraph = functiongraph( tangentline )  
              &lt;&lt; 
                  strokeColor:"black",
                  dash:3  
              &gt;&gt;;

            // Display the equation of the current tangent line
            text( 1.5,5.5,function() {
                  x0 =  xslider.Value();
                  m = (f1(x0+0.00001) - f1(x0))/0.00001;
                  y0 = f1(x0);
                  return  "y  =  "+ trunc(m,2) + " ( x- " + trunc(x0,2) + " )  +  " + trunc(y0,2) ;
                  } 
                ) 
                      &lt;&lt; 
                        color:"black",
                        fontSize:16
                      &gt;&gt; ;

            // Graph the lines from the point to the x and y axis
            line( [function() {return xslider.Value();} ,
                        function() {return f1(xslider.Value());}],[0,function() {return f1(xslider.Value());}] )
                      &lt;&lt; 
                        color:"red",
                        straightFirst:false, 
                        straightLast:false,
                        dash:1
                      &gt;&gt; ;
            line( [function() {return xslider.Value();} ,
                        function() {return f1(xslider.Value());}],[function() {return xslider.Value();}, 0 ] )
                      &lt;&lt; 
                        color:"red",
                        straightFirst:false, 
                        straightLast:false,
                        dash:1
                      &gt;&gt; ;


            // Draw a dot at the current point on the function
            point( function() {return xslider.Value();} ,
                        function() {return f1(xslider.Value());}) 
                      &lt;&lt; 
                        name:"(a,f(a))",
                        color:"red" 
                      &gt;&gt; ;
            // Label the x and y values of the current point
            text( -0.75, function() {return f1(xslider.Value());}, "f(a)") 
                      &lt;&lt; 
                        color:"red" 
                      &gt;&gt; ;
            text( function() {return xslider.Value();} , -0.25 , "a") 
                      &lt;&lt; 
                        color:"red" 
                      &gt;&gt; ;

        </slate>
      </interactive>
    </statement>
    <hint>
      <p>
        See <xref ref=""/> for the pretext reference. 
      </p>
      <p>
        It is important to note that JessieCode has a different syntax than classic JSXGraph, but has the benefit of being able to write the code directly in the PreTeXt file.   
      </p>
      <p>
        You can see several examples of JessieCode syntax by going to <url href="https://github.com/jsxgraph/JessieCode" /> and scrolling down to "Element functions", and by reading <url href="https://jsxgraph.uni-bayreuth.de/wp/docs_jessiecode/" />.
      </p>
      <p>
        Generally, a line of JessieCode can be found by finding the relevant JSXGraph object and attributes, and rewriting this as a function of the same name followed by properties in &lt;&lt;...&gt;&gt;.
        For example, <c>b1.create('point',[1,2], {name:'X', size:4});</c> becomes <c>point(1,2) &lt;&lt; name:'X', size:4 &gt;&gt; ;</c>.
        In PreTeXt, &lt; and &gt; is replaced by &amp;lt; and &amp;gt; , and the code gets a bit messy.
      </p>
      <p>
        Many, but not all, features of JSXGraph are available in JessieCode.  
        You can find a <url href="http://jsxgraph.uni-bayreuth.de/wiki/index.php?title=Category:Examples">collection of examples</url> written using classic JSXGraph, and the full <url href="https://jsxgraph.uni-bayreuth.de/docs/">JSXGraph Documentation</url>.  
        With a bit of experimentation, it is often possible to translate most JSXGraph code into JessieCode.
      </p>
    </hint>
    <solution>
      <pre>
      <![CDATA[
        <interactive platform="jsxgraph" width="50%">
          <slate xml:id="jsxgraph-slope-via-tangent"  surface="jessiecode" axis="true" grid="true" >

            // Set the graph window.  
            //  The order of values is [xmin, ymax, xmax, ymin]
            //  keepaspectratio=true forces the x and y scales to be equal
            $board.setBoundingBox( [ -5, 10, 7, -6 ] , keepaspectratio=false) ;

            // Create the slider 
            xslider = slider(
                  // Specify slider location
                    [0.5,-3], [5.5,-3], 
                  // Specify smallest/starting/largest value for slider
                    [-5,1,7])
                &lt;&lt;
                    name:"a",
                    snapWidth:0.01
                &gt;&gt;  ;      
              
              // Define a function and its tangent line at the current slider value
              // This will allow us to reference them in several places
              f1 = function(x) { 
                return 1/5*(x+3)*(x-2)*(x-5)-1;
              } ;
              tangentline = function(x) {
                x0 =  xslider.Value();
                m = (f1(x0+0.00001) - f1(x0))/0.00001;
                return m*(x-x0) + f1(x0) ; 
              } ;

              // Graph the function and its tangent line 
              f1Graph = functiongraph( f1 )  
                &lt;&lt; 
                    strokeColor:"blue"  
                &gt;&gt;;
              tangentGraph = functiongraph( tangentline )  
                &lt;&lt; 
                    strokeColor:"black",
                    dash:3  
                &gt;&gt;;

              // Display the equation of the current tangent line
              text( 1.5,5.5,function() {
                    x0 =  xslider.Value();
                    m = (f1(x0+0.00001) - f1(x0))/0.00001;
                    y0 = f1(x0);
                    return  "y  =  "+ trunc(m,2) + " ( x- " + trunc(x0,2) + " )  +  " + trunc(y0,2) ;
                    } 
                  ) 
                        &lt;&lt; 
                          color:"black",
                          fontSize:16
                        &gt;&gt; ;

              // Graph the lines from the point to the x and y axis
              line( [function() {return xslider.Value();} ,
                          function() {return f1(xslider.Value());}],[0,function() {return f1(xslider.Value());}] )
                        &lt;&lt; 
                          color:"red",
                          straightFirst:false, 
                          straightLast:false,
                          dash:1
                        &gt;&gt; ;
              line( [function() {return xslider.Value();} ,
                          function() {return f1(xslider.Value());}],[function() {return xslider.Value();}, 0 ] )
                        &lt;&lt; 
                          color:"red",
                          straightFirst:false, 
                          straightLast:false,
                          dash:1
                        &gt;&gt; ;


              // Draw a dot at the current point on the function
              point( function() {return xslider.Value();} ,
                          function() {return f1(xslider.Value());}) 
                        &lt;&lt; 
                          name:"(a,f(a))",
                          color:"red" 
                        &gt;&gt; ;
              // Label the x and y values of the current point
              text( -0.75, function() {return f1(xslider.Value());}, "f(a)") 
                        &lt;&lt; 
                          color:"red" 
                        &gt;&gt; ;
              text( function() {return xslider.Value();} , -0.25 , "a") 
                        &lt;&lt; 
                          color:"red" 
                        &gt;&gt; ;

          </slate>
        </interactive>
      ]]>
      </pre>
    </solution>
  </exploration>


  <exploration>
    <task>
      <statement>
        <p>
          Create the following table using the pretext <c>tabular</c> environment.
        </p>
        <tabular>
          <col right="medium" /><col right="medium" /><col /> 
          <row bottom="medium">
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
          </row>
          <row>
            <cell>4</cell>
            <cell>5</cell>
            <cell>6</cell>
          </row>
        </tabular>
      </statement>
      <solution>
        <pre>
        <![CDATA[
          <tabular>
            <col right="medium" /><col right="medium" /><col /> 
            <row bottom="medium">
              <cell>1</cell>
              <cell>2</cell>
              <cell>3</cell>
            </row>
            <row>
              <cell>4</cell>
              <cell>5</cell>
              <cell>6</cell>
            </row>
          </tabular>
        ]]>
        </pre>
      </solution>
    </task>
    <task>
      <statement>
        <p>
          Create the same table using a <latex /> array environment. 
          <me>
            \begin{array}{c|c|c} 
              1 \amp 2 \amp 3 \\ \hline
              4 \amp 5 \amp 6
            \end{array}
          </me>
        </p>
      </statement>
      <solution>
        <pre>
        <![CDATA[
          <me>
            \begin{array}{c|c|c} 
              1 \amp 2 \amp 3 \\ \hline
              4 \amp 5 \amp 6
            \end{array}
          </me>
        ]]>
        </pre>
      </solution>
    </task>
  </exploration>

  


</section>

<section>
  <title>Basic Principles and Frequently Asked Questions</title>
  <p>
    <dl>
      <li>
        <title>Nesting Environments</title>
        <p>
          All normal text should be contained inside <c>p</c> environments. 
          Moreover, a <c>p</c> environment should <em>only</em> contain text, math, and lists.  
        </p>
        <sidebyside widths="45% 45%" margins="0%" valign="top">
          <paragraphs>
            <title>Never Write</title>
            <pre>
            <![CDATA[
              <p>
                The frog is a majestic creature:
                <image source="frog.gif" width="100%">
                </image>
              </p>
            ]]>
            </pre>
          </paragraphs>
          <paragraphs>
            <title>Always Write</title>
            <pre>
            <![CDATA[
              <p>
                The frog is a majestic creature:
              </p>
              <image source="frog.gif" width="100%">
              </image>
            ]]>
            </pre>
          </paragraphs>
        </sidebyside>
        <p>
          Some environments have more complex rules about how they can be combined.  
        </p>
        <p>
          For example, the <c>example</c>, <c>exercise</c>, <c>project</c>, and <c>task</c> environments are essentially the only environments that can contain <c>solution</c>, <c>hint</c>, and <c>answer</c> sub-environments.  
          <em>However</em>, these sub-environments are only allowed in a very specific format.  If solutions are to be used, they <em>must</em> be paired with a <c>statement</c> (and optionally hint, answer) and <em>no other divisions</em>, not even a paragraph. 
        </p>

        <sidebyside widths="45% 45%" margins="0%" valign="top">
          <paragraphs>
            <title>Never Write</title>
            <pre>
            <![CDATA[
              <example>
                <p>
                  A paragraph, ending in a question.
                </p>
                <solution>
                  <p>
                    A solution to the question in the paragraph.
                  </p>
                </solution>
              </example>
            ]]>
            </pre>
          </paragraphs>
          <paragraphs>
            <title>Always Write</title>
            <pre>
            <![CDATA[
              <example>
                <statement>
                  <p>
                  A paragraph, ending in a question.
                  </p>
                </statement>
                <solution>
                  <p>
                    A solution to the question in the paragraph.
                  </p>
                </solution>
              </example>
            ]]>
            </pre>
          </paragraphs>
        </sidebyside>
      </li>
      <li>
        <title>References</title>
        <p>
          To reference content on the web, write
          <c>&lt;url href=""&gt;Display Text/&lt;/url&gt;</c>, or write 
          <c>&lt;url href="" /&gt;</c> if you would like the full URL displayed,
          or 
        </p>
        <p>
          If you would like to reference text inside the PreTeXt document, place that text inside an environment, and include the attribute <c>xml:id="REFNAME"</c> in its opening tag. 
          To reference the element elsewhere in the document, type <c>&lt;xref ref="REFNAME"/&gt;</c>
        </p>
      </li>
      <li>
        <title>Emphasizing Text</title>
        <p>
          <c>em</c> <em>emphasizes</em>, while <c>alert</c> <alert>shoults</alert>. 
        </p>
        <p>
          To add a title without creating a new (sub*)section, use the <c>paragraphs</c> environment.
        </p>
        <pre>
        <![CDATA[
          <paragraphs>
            <title>Title</title>
            <p>
              Paragraph text.
            </p>
          </paragraphs>
        ]]>
        </pre>
      </li>
      <li>
        <title>Summarizing Concepts</title>
        <p>
          Use the <c>assemblage</c> environment to summarize content, such as a list of formulas.  
          Assemblages are not numbered, so when you reference them you need to add <c>text='custom'</c> or <c>text='title'</c>.  For example, you would need to type  to any <c>&lt; xref text='title' ref="REFNAME" /&gt;</c>
        </p>
      </li>
      <li>
        <title>Restrictions on Environments</title>
        <p>
          By design, PreTeXt imposes a rigid framework on the logical environments that can be used.  In fact, some use the name PreTeXt to refer to this framework itself (as distinguished from its current implementation). 
        </p>
        <p>
          This framework is intended to balance two conflicting goals:
          <ol>
            <li>
              <p>
                Allow the author to focus on content as opposed to presentation
              </p>
            </li>
            <li>
              <p>
                Facilitate the OER principles of Adapting and Remixing existing works. 
              </p>
            </li>
          </ol>
          These principles are in tension because many authors will instinctively use different categories and logical divisions as they author their books.  
          However, when authors are given free rein to develop their own logical divisions, it becomes very difficult to "remix" (combine sections of) books written by different authors. 
        </p>
        <p>
          It is therefore necessary to draw the line somewhere.  Over many years of careful work, the authors of PreTeXt have come up with one way of drawing this line, that can be made to work for a wide range of mathematical texts. 
        </p>
      </li>
      <li>
        <title>Principles for the (Current) Web Interfae</title>
        <p>
          In theory, the <pretext /> language can compile into a variety of different web formats, each with a different philosophy of how to present information to the user.  
          This is another reason why it is important to carefully follow the syntax as intended, rather than hacking together different elemnts based on their behavior. 
        </p>
        <p>
          At the same time, it will be valuable for an author to understand the core design principles of the <em>current</em> web format.
        </p>
        <ul>
          <li>
            <p>
              <em>Collapsed Details Emphasizes Overall Structure</em>.
              By default, many (even most) environments are collapsed (knowled) when a user first visits the section. 
              This helps emphasize the overall structure of the material, and can almost act as an automatic summary of the section.  
              As a student goes through the material, they expand the relevant element they are working on, deepening their knowledge of the material.
            </p>
          </li>
          <li>
            <p>
              <em>References Show a Web of Knowledge</em>.
              Make regular use of the built in environments such as <c>definition</c>, <c>theorem</c>, <c>example</c>, and <c>figure</c>, and make sure you use unique identifiers with the <c>@xml:id</c>  attribute.
            </p>
            <p>
              Whenever you reference this attribute <pretext /> creates a link which, when you click on it, expands and displays the previous content (e.g. definition) in the current context.   
              Students can also click on the "show in context" link to go back to the section where this was originally introduced. 
            </p>
            <p>
              This helps emphasize how the web of mathematical knowledge develops across larger divisions such as sections, chapters, and parts. 
            </p>
          </li>
        </ul>
      </li>
      <li>
        <title>Mastering PreTeXt Syntax</title>
        <p>
          When you use a more complex environment for the first time or in a new way, double check the PreTeXt schema <url href="https://pretextbook.org/doc/schema/"/>.  
        </p>
        <p>
          The <em>Content</em> of the <alert>XML Representation Summary</alert> tells you what type of content the environment is allowed to contain.
          Be careful when reading the Schema, and refer to the abbreviations in <url href="https://pretextbook.org/doc/guide/html/schema-reading-relaxng.html">the documentation</url>.  
        </p>
        <p>
          For example, consider the entry for the <url href="https://pretextbook.org/doc/schema/schemas/pretext_xsd/elements/exercise.html"><c>exercise</c></url> environment. 
          Even though the <c>exercise</c> environment permits <c>p</c> and <c>solution</c> environments, they cannot be used at the same time, as they are in separate Groupings ( ) that are combined by a Choice |.  If you want to use a <c>solution</c> in an <c>exercise</c>, the exercise must consist of a <c>statement</c> followed by zero or more <c>hint</c>, <c>answer</c>, or <c>solution</c> environments.  
        </p>
        <p>
          You can also use the Schema to see where an environment can be used, by looking at the <alert>Included in content model of elements</alert> section of the page.  
          This will help you make sure that you are placing your environment in a valid location. 
          For example the <url href="https://pretextbook.org/doc/schema/schemas/pretext_xsd/elements/exercise.html"><c>exercise</c></url> environment can be used in (among other places) sections and subsections, but not inside of another exercise.  
        </p>
      </li>
      <li>
        <title>Uniquely Flexible Environments</title>
        <p>
          <url href="https://pretextbook.org/doc/schema/schemas/pretext_xsd/elements/task.html"><c>task</c></url> environments can be placed in <c>example</c>, <c>exercise</c>, and <c>project-like</c> environments.
          Task environments can contain text and images, but they can also contain <c>solution</c> environments, and can even contain nested <c>task</c> environments.
        </p>
        <p>
          <alert>Note:</alert> PreTeXt does not have a general use "details" environment.  The <c>fn</c> (footnote) environment is officially restricted to text only, even though it currently compiles correctly with content including images, display math, etc.  
        </p>
        <p>
          The <c>task</c> environment provides an alternative (and officially approved) approach to incorporating knowled text throughout examples and project-like environments: simply write the main content in the <c>statement</c> for the main content, the knowled content in the <c>solution</c>, and add an instruction to the reader to come up with the hidden content on their own.  
        </p>
        <p>
          Nested lists are available, since <c>li</c> elements can contain new list environments. 
        </p>
      </li>
    </dl>
  </p>
</section>



<section>
  <title>Interactive Activities</title>

  <exploration>
    <introduction>
      <p>
        Create the following exercises using the native PreTeXt markup language (do not use the <c>webwork</c> environment).
      </p>
    </introduction>
    <task>
      <statement>
        <p>
          Write a True/False question. 
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Write a Multiple Choice question. 
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Write a Parson's Problem question. 
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Write a Matching question. 
        </p>
      </statement>
    </task>
  </exploration>

  <exercise xml:id="tfq" label="true-false">
    <title>True/False Question</title>
    <statement correct='yes'>
      <p>
        A True/false question
      </p>
    </statement>
    <feedback>
      <p>
        Feedback
      </p>
    </feedback>
  </exercise>

  <exercise label="some-matching">
    <title>Matching Problem</title>
    <statement>
      <p>
        A multiple choice question
      </p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>
            right answer 1
          </p>
        </statement>
        <feedback>
          <p>
            answer specific feedback
          </p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            right answer 1
          </p>
        </statement>
        <feedback>
          <p>
            answer specific feedback
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            wrong answer 1
          </p>
        </statement>
        <feedback>
          <p>
            answer specific feedback
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            wrong answer 2
          </p>
        </statement>
        <feedback>
          <p>
            answer specific feedback
          </p>
        </feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="parsons">
    <title>Parsons Problem</title>
    <statement>
      <p>
        Rearrange the blocks in alphebetical order
      </p>
    </statement>
    <blocks>  
      <!-- Write problems in correct order. -->
      <!-- Add correct="no" to distractors -->
      <!-- @order says how to print the STATIC VERSION -->
      <block order="5">
        <p>
          A
        </p>
      </block>
      <block order="2">
        <p>
          B
        </p>
      </block>
      <block order="1">
        <p>
          C
        </p>
      </block>
      <block order="4">
        <p>
          D
        </p>
      </block>
      <block order="3" correct="no">
        <p>
          <m>103</m>
        </p>
      </block>
    </blocks>
  </exercise>

  <exercise label="matching">
    <title>Matching Problem</title>
    <statement>
      <p>
        Match the letters with their order in the alphabet
      </p>
    </statement>
    <matches>
      <match>
        <premise>
          A
        </premise>
        <response>
          1
        </response>
      </match>
      <match>
        <premise>
          B
        </premise>
        <response>
          2
        </response>
      </match>
      <match>
        <premise>
          C
        </premise>
        <response>
          3
        </response>
      </match>
    </matches>
  </exercise>
</section>


</chapter>
